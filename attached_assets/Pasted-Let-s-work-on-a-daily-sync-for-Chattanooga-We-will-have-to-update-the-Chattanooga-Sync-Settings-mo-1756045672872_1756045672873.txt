Let’s work on a daily sync for Chattanooga.  We will have to update the Chattanooga Sync Settings modal at Admin>Supported Vendors.  We can use the same type of functionality as Sports South, although the update process will be different as Chattanooga used a CSV download while Sports South uses API calls.

Query to whether we should reserve slots for each vendors update?  What happens if all vendors are set to update at 2:00AM?

Chattanooga documentation can be accessed at https://www.chattanoogashooting.com/new-account/login?guid=D1B08334-BF00-0755-878D2425AC0626A8 
 https://developers.chattanoogashooting.com/api/rest/v5/documentation

Chattanooga has two types of Get calls for product information.

1)	GET /items – In this request, an API call to get info one or more items.  You can use several types of IDs in the request, including UPC.  The response contains info on the requested item(s). I assume that we use this for the Vendor Price Comparison call. 
2)	GET /items/product-feed – In this request, an API call is made to retrieve a CSV file with all product information.  We should use this for the nightly update.  We would download this file and use some sort of ‘diff’ function to see what records changed since the last download, and then update the information in the Master Product Catalog and any linked table with the Chattanooga Vendor SKU (if we have one).



Request Authorization
We authorize every request against our API using the following two-step process:
1.	Your account has been granted access by Chattanooga Shooting
2.	Your API Credentials are valid
Every request made to our API requires the HTTP Authorization header using the following format:
Basic [Your SID]:[MD5 Hash of your token]
Please note the requirement for you to MD5 Hash your token before sending. If you do not MD5 Hash your token, your request will be rejected.
Making Requests
API Endpoint
https://api.chattanoogashooting.com/rest/v5/
Our API has been built to accept REST requests. Requests made to a RESTful API generally operate against a resource and will usually have four base methods available - GET, POST, PUT, and DELETE. These methods are also known as retrieve records, create a record, update a record, and delete a record.
For example, requests against an order resource could look like the following:
HTTP Method	URL	Function
GET	/orders	Returns one or more order
GET	/orders/123456	Returns one order
POST	/orders	Creates an order
PUT	/orders/123456	Updates an order
DELETE	/orders/123456	Deletes an order
Occasionally it is necessary to provide additional functionality that does not fall into any of those base methods. These additional methods will have a unique URL, but will follow the same rules as the base REST methods.
Response
For consistency and ease of access, all responses from our API are in JSON, and all responses will be "wrapped" in the name of the resource the request was for. For all base REST methods, the name used to wrap the response will match the resource of the URL. However, as mentioned above, occasionally it is necessary to provide functionality beyond the base REST methods. In these situations the name used to wrap the response could change - these special response structures are documented below.
Additionally, some requests have limits on how many records can be returned per response. When there is more data available than can be returned in a single response, we will return the first page of data and provide you with a pagination structure. This structure contains how many items there are per page, which page you're on, and how many pages are available. Using this data along with the page and per_page inputs for a request, you can retrieve the additional records available.

ONE OR MORE ITEMS


GET /items
Use this request to retrieve information for one or more items. Information available includes inventory, pricing, and basic item details.
Requests may be made for a single item, multiple items, and/or for all items for one or more manufacturers.
For larger result sets, you can specify page and per_page to control how many items you would like to receive per page and which page to return in the request.
Inputs
Argument	Required	Default	Type	Length	Limit	Note
item_ids	False	-	String	24	50	Separate item ids with a comma
manufacturer_ids	False	-	String	2	10	Separate manufacturer ids with a comma
upc_codes	False	-	String	13	50	Separate UPC codes with a comma
serialized_flag	False	-	Boolean	-	-	Pass 1 to return only serialized items. Pass 0 to return only items that are NOT serialized.
qas_last_updated_after	False	-	String	-	-	Pass a UTC timestamp
i.e. 2024-09-17T17:52:24.913Z
custom_properties	False	-	Array[]	-	-	URL Encoded JSON array with a structure for each property/value combination to limit to
						
						
						

return_custom_properties	False	0	Boolean	-	-	Pass 1 to return your custom properties
Page	False	1	Integer	-	-	-
per_page	False	10	Integer	-	50	-
Response
An array of item structures
Example Request
GET /items?item_ids=item1,item2
Example Response
{
    "items": [
        {
            "custom_properties": {
                "favorite_item": "1"
            },
            "cssi_id": "item1",
            "custom_price": 175.49,
            "in_stock_flag": 1,
            "serialized_flag": 0,
            "ffl_flag": 0,
            "inventory": 3746,
            "map_price": "",
            "name": "Test Item 1",
            "retail_price": 220.49,
            "drop_ship_flag": 1,
            "drop_ship_price": 220:49,
            "available_drop_ship_delivery_options": "economy|next_day_air|second_day_air|ground"
        },
        {
            "custom_properties": {
                "favorite_item": "0"
            },
            "cssi_id": "item2",
            "custom_price": 585.29,
            "in_stock_flag": 1,
            "serialized_flag": 1,
            "ffl_flag": 1,
            "inventory": 120,
            "map_price": "",
            "name": "Test Item 2",
            "retail_price": 655.99,
            "drop_ship_flag": 0,
            "drop_ship_price": 0,
            "available_drop_ship_delivery_options": ""
        }
    ],
    "pagination": {
        "page": 1,
        "page_count": 1,
        "per_page": 10
    }
}





CALL CSV FILE WITH ALL PRODUCTS

GET /items/product-feed
Use this request to retrieve information for all items, or items belonging to one or more manufacturers. Information available includes inventory, pricing, and basic item details.
Because this request generates a lot of data, the response consists of a URL to a CSV file containing your results.
If an item is marked as allocated, please contact your sales rep to order that product.
NOTE: Columns and data formats within columns are subject to change.
Inputs
Argument	Required	Default	Type	Length	Limit	Note
manufacturer_ids	False	-	String	2	50	Separate manufacturer ids with a comma
optional_columns	False	-	String	-	-	Separate each optional column with a comma. Available options:
•	specifications,retail_map
custom_properties	False	-	Array[]	-	-	URL Encoded JSON array with a structure for each property/value combination to limit to
						
						
						

return_custom_properties	False	0	Boolean	-	-	Pass 1 to return your custom properties
Response
A URL to the CSV of your Product Feed
Example Request
GET /items/product-feed?manufacturer_ids=CC,FA&optional_columns=specifications,retail_map
Example Response
{
    "product_feed": {
        "url": "https://api.chattanoogashooting.com/rest/v5/files/customer_feeds/products/55555555-5555-5555-5555555555555555.csv"
    }
}

