Here’s a concise, read-only review of how store-level credentials are designed and where to look when tests fail.
What “store-level credentials” are supposed to do
Each store saves its own vendor credentials. These are used for Vendor Price Comparison searches and for a “Test Connection” button at the store level.
Admin credentials are separate and global; GunBroker is a special case that uses admin credentials for store searches.
Key server pieces
server/credential-management-routes.ts
Save store creds: POST /org/:slug/api/vendors/:vendorId/credentials
Internally converts numeric vendorId to the supported vendor name using storage.getVendor and storage.getSupportedVendor; then stores via credentialVault.storeStoreCredentials(...)
Test store creds: POST /org/:slug/api/vendors/:vendorId/test-connection
Converts numeric to name as above; for vendor “gunbroker” it deliberately tests using admin creds; otherwise calls vendorRegistry.testVendorConnection(name,'store',companyId)
server/credential-vault-service.ts
getVendorSchema(name): derives schema from supported vendor’s credentialFields; decides which fields are required/encrypted
storeStoreCredentials(name, companyId, creds): validates fields, encrypts sensitive values, writes to company_vendor_credentials
getStoreCredentials(name, companyId,...): reads, decrypts using the same schema
testConnection(name, level, companyId): fetches decrypted credentials and calls the handler in vendorRegistry
Robust lookups: when passed a string vendor id, it tries name, short code, and for gunbroker several name variants
server/vendor-registry.ts
Registers handlers for lipseys, sports_south, chattanooga, gunbroker, bill_hicks
testVendorConnection(name, level, ...): finds the handler and calls its testConnection
Why a store Test Connection might fail
No store credential row exists (getStoreCredentials returns null)
The vendor identifier mismatch: the save/test route receives a numeric id, but the vault expects a name; the helper now maps id→name before saving/testing, but older calls might not
Schema mismatch: posted fields don’t match the vendor’s credentialFields; missing required fields triggers 400s with “Required field missing: …”
GunBroker special case: store-level test intentionally uses admin creds; if admin creds are missing, you’ll see “No credentials found”
Handler missing: vendorRegistry didn’t initialize (now initialized at startup); or the supported vendor name/short code in DB is nonstandard and lookups fail (fixed by trying short codes and variations)
What to try in the app (no Replit changes)
For a store/vendor that fails:
Save store credentials again from the store UI, then click Test Connection
If it’s GunBroker, ensure admin credentials are present in Admin > Supported Vendors; store test uses admin creds by design
For a vendor with unexpected name/short code:
Ensure Supported Vendors’ name/short code normalize to the handler id, e.g., “GunBroker” and/or short code “gunbroker”
To verify backend looks OK:
After logging in as admin, hit GET /api/admin/vendors/handlers to confirm the handler exists
GET /api/admin/credentials/health to see which vendors have admin creds and store-credential counts
Where to inspect schemas/fields
Supported vendor credentialFields in DB (these drive what the store form should capture)
The vault’s getVendorSchema(name) mirrors those into required/encrypted fields for validation
If you want, I can:
Add a small diagnostic endpoint to dump the resolved “vendorId mapping” for a numeric id so we can see exactly which supported vendor name is being used during save/test.
Add clearer 400 responses on store Test Connection to say exactly which path failed (no admin creds vs no store creds vs no schema vs no handler), without changing any Replit/runtime behavior.